<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alex Pliutau</title>
    <link>/</link>
    <description>Recent content on Alex Pliutau</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Alex Pliutau</copyright>
    <lastBuildDate>Thu, 06 Dec 2018 10:01:43 +0100</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker and Go modules</title>
      <link>/go-modules-docker/</link>
      <pubDate>Thu, 06 Dec 2018 10:01:43 +0100</pubDate>
      
      <guid>/go-modules-docker/</guid>
      <description>As you may know Go 1.11 includes opt-in feature for versioned modules. Before go modules Gophers used dependency managers like dep or glide, but with go modules you don&amp;rsquo;t need a 3rd-party manager as they are included into standard go toolchain.
Also modules allow for the deprecation of the GOPATH, which was a blocker for some newcomers in Go.
In this video I am going to demonstrate how to enable go modules for your program and then package it with Docker.</description>
    </item>
    
    <item>
      <title>Practice Go. Find Broken Node</title>
      <link>/practice-go-broken-node/</link>
      <pubDate>Tue, 18 Sep 2018 15:51:00 +0700</pubDate>
      
      <guid>/practice-go-broken-node/</guid>
      <description>Create a Pull Request for this exercise
We have a chain of nodes, the functionality of each node is to find if next node is working well. Unfortunately, we recently found that some of our nodes are broken.
Each node checked next node and we have a report about it. We can totally trust reports made by working nodes, but broken nodes could return wrong results, so we can&amp;rsquo;t trust them.</description>
    </item>
    
    <item>
      <title>Microservices with go-kit. Part 2</title>
      <link>/go-kit-2/</link>
      <pubDate>Tue, 14 Aug 2018 16:29:32 +0700</pubDate>
      
      <guid>/go-kit-2/</guid>
      <description>This is a text version of the &amp;ldquo;packagemain #13: Microservices with go-kit. Part 2&amp;rdquo; video.
 Part 1  In the previous video we prepared a local environment for our services using kit command line tool. In this video we&amp;rsquo;ll continue to work with this code.
Let&amp;rsquo;s implement our Notificator service first by writing the proto definition as it&amp;rsquo;s supposed to be a gRPC service. We aleady have pre-generated file notificator/pkg/grpc/pb/notificator.</description>
    </item>
    
    <item>
      <title>Hire Me</title>
      <link>/page/hire-me/</link>
      <pubDate>Tue, 14 Aug 2018 14:10:50 +0700</pubDate>
      
      <guid>/page/hire-me/</guid>
      <description>Hi! I&amp;rsquo;m Alex Pliutau I am a backend engineer with a passion for APIs, Web, Microservices, etc. I&amp;rsquo;m also a weekend motorcycle rider üèç, currently living in Vietnam, Ho Chi Minh City. I&amp;rsquo;m looking for my next thing, maybe that&amp;rsquo;ll be you!
What I&amp;rsquo;m looking for a Senior Backend Engineer role on a product or developer tools team.
Ideally you:
 Care about inclusion and diversion in your organization. Provide professional development opportunities.</description>
    </item>
    
    <item>
      <title>Deploying Facebox to AWS ECS</title>
      <link>/deploying-facebox-to-aws-ecs/</link>
      <pubDate>Thu, 09 Aug 2018 14:35:51 +0700</pubDate>
      
      <guid>/deploying-facebox-to-aws-ecs/</guid>
      <description>Currently I am building a product on top of face recognition functionality and I am using Facebox with go-sdk as it&amp;rsquo;s the easiest way to add face recognition features to your project. And it&amp;rsquo;s super developer friendly:
docker run -p 8080:8080 -e &amp;quot;MB_KEY=$MB_KEY&amp;quot; machinebox/facebox  Today it&amp;rsquo;s time for me to deploy the project. And since we use AWS I have to deploy my Facebox instance to ECS (Elastic Container Service).</description>
    </item>
    
    <item>
      <title>Table driven tests in Go</title>
      <link>/table-driven-tests-in-go/</link>
      <pubDate>Tue, 07 Aug 2018 11:02:46 +0700</pubDate>
      
      <guid>/table-driven-tests-in-go/</guid>
      <description>In practice-go we often use table driven testing to be able to test all function scenarios. For example the FindAnagrams() function returns us a list of anagrams found in the dictionary for given input. To be able to test this function properly we need to test multiple cases, like empty input, valid input, invalid input, etc. We could right different asserts to make it, but it&amp;rsquo;s much more easier to use table tests.</description>
    </item>
    
    <item>
      <title>Microservices with go-kit. Part 1</title>
      <link>/gi-kit-1/</link>
      <pubDate>Mon, 30 Jul 2018 11:28:51 +0700</pubDate>
      
      <guid>/gi-kit-1/</guid>
      <description>This is a text version of the &amp;ldquo;packagemain #12: Microservices with go-kit. Part 1&amp;rdquo; video.
Nowadays, Microservices is one of the most popular buzz-word in the field of software architecture.
There are different definitions of the word &amp;ldquo;microservice&amp;rdquo;, I like to say that Microservice is what single programmer can design, implement, deploy, and maintain.
In a monolithic application, components invoke one another via language‚Äëlevel method or function calls. In contrast, a microservices‚Äëbased application is a distributed system running on multiple machines.</description>
    </item>
    
    <item>
      <title>Practice Go: Warriors</title>
      <link>/practice-go-warriors/</link>
      <pubDate>Tue, 24 Jul 2018 14:36:06 +0700</pubDate>
      
      <guid>/practice-go-warriors/</guid>
      <description>Create a Pull Request for this exercise
BitVille and ByteVille are 2 warring tribes. BitVille has a spy telescope called the Hobble Scope, to count the number of Byte Warriors in ByteVille. The Hobble Scope, however, has a problem. Its primary lens is contaminated with bugs which block part of each image. The Hobble Scope&amp;rsquo;s flawed images are stored by pixels in a file.
Each image is square and each pixel or cell contains either a 0 or a 1.</description>
    </item>
    
    <item>
      <title>Organizing the first GopherCon in Vietnam</title>
      <link>/gophercon-vietnam-2018/</link>
      <pubDate>Fri, 20 Jul 2018 15:34:10 +0700</pubDate>
      
      <guid>/gophercon-vietnam-2018/</guid>
      <description>Hi Gophers!
We&amp;rsquo;re working hard to organize the first GopherCon in Vietnam, HCMC this year. The expected date is November 2018.
GopherCon Vietnam is organized by a community of a passionate Gophers on a volunteer basis.
Be part of the first GopherCon in Vietnam, join our team:
 Landing Slack channel Twitter Facebook For Speakers For Sponsors  </description>
    </item>
    
    <item>
      <title>Getting Started with OAuth2 in Go</title>
      <link>/getting-started-with-oauth2-in-go/</link>
      <pubDate>Wed, 30 May 2018 14:48:29 +0700</pubDate>
      
      <guid>/getting-started-with-oauth2-in-go/</guid>
      <description>This is a text version of this video: packagemain #11: Getting started with OAuth2 in Go.
Getting started with OAuth2 in Go Authentication usually is very important part in any application. You can always implement your own authentication system, but it will require a lot of work, registration, forgot password form, etc. That&amp;rsquo;s why OAuth2 was created, to allow user to log in using one of the many accounts user already has.</description>
    </item>
    
    <item>
      <title>Building a Slack Bot with Go and Wit.ai</title>
      <link>/building-slack-bot-with-go/</link>
      <pubDate>Wed, 23 May 2018 08:27:36 +0700</pubDate>
      
      <guid>/building-slack-bot-with-go/</guid>
      <description>Building a Slack Bot with Go and Wit.ai This is a text version of this video: packagemain #9: Building Slack Bot with Go and Wit.ai.
We will build a simple Slack Bot with NLU functionality to get some useful information from Wolfram. No worries if you didn&amp;rsquo;t use Wolfram before, it&amp;rsquo;s a computational knowledge engine which can give you a short answer to your question.
There are different platforms for NLU, such as LUIS.</description>
    </item>
    
    <item>
      <title>Transitioning from Engineer to Engineering Manager</title>
      <link>/transitioning-from-eng-to-em/</link>
      <pubDate>Sat, 12 May 2018 09:21:50 +0700</pubDate>
      
      <guid>/transitioning-from-eng-to-em/</guid>
      <description>A couple of months ago I moved from a Team Lead position to being an engineering manager at Wizeline Vietnam on a small sized team. I&amp;rsquo;ve found that this role change come with a mindset change. Some things that mattered before when I was an individual contributor (writing good code, applying best engineering practices) became less important. On the other hand, new things became more important, e.g. team health, team success and team career growth.</description>
    </item>
    
    <item>
      <title>Building Google Home Action in Go</title>
      <link>/building-google-home-action-in-go/</link>
      <pubDate>Mon, 02 Apr 2018 16:07:19 +0700</pubDate>
      
      <guid>/building-google-home-action-in-go/</guid>
      <description>Google Home This is a text version of this video: packagemain #10: Building Google Home Action in Go.
Google Home is a voice Assistant, similar to Amazon Alexa, but working with Google services. It has a lot of built-in integrations, but what is interesting for us developes is that we can build our programs for it. Google call them Actions.
We will build an Action, which will help user to find an air quality index of the city user is located in.</description>
    </item>
    
    <item>
      <title>Video series: Running Go programs on Raspberry Pi</title>
      <link>/video-series-running-go-programs-on-raspberry-pi/</link>
      <pubDate>Mon, 05 Feb 2018 10:02:15 +0700</pubDate>
      
      <guid>/video-series-running-go-programs-on-raspberry-pi/</guid>
      <description>I started new video series about writing and running Go programs on Raspberry Pi. In these videos I will cover:
 Capture image on Raspberry Pi 3 from webcamera Use Facebox from https://machinebox.io to detect faces on image Greet user using Text-To-Speech Receive and parse user reply using Speech-To-Text  Videos:
 Part 1 Part 2 Part 3  </description>
    </item>
    
    <item>
      <title>Face Detection in Go using OpenCV and MachineBox</title>
      <link>/face-detection-in-go-machinebox-opencv/</link>
      <pubDate>Fri, 19 Jan 2018 10:32:25 +0700</pubDate>
      
      <guid>/face-detection-in-go-machinebox-opencv/</guid>
      <description>This is a text version of this video: packagemain #5: Face Detection in Go using OpenCV and MachineBox.
I found a very nice developer-friendly project MachineBox, which provides some machine learning tools inside Docker Container, including face detection, natural language understanding and few more. And it has SDK in Go, so we will build a program which will detect my face. We will also use OpenCV to capture video from Web camera, it also has Go bindings.</description>
    </item>
    
    <item>
      <title>Image Recognition in Go using Tensorflow</title>
      <link>/image-recognition-in-go-using-tensorflow/</link>
      <pubDate>Mon, 08 Jan 2018 17:25:16 +0700</pubDate>
      
      <guid>/image-recognition-in-go-using-tensorflow/</guid>
      <description>This is a text version of this video: packagemain #4: Image Recognition in Go using Tensorflow.
Tensorflow is a computation library that represents computations with graphs. Its core is implemented in C++ and there are also bindings for different languages, including Go.
In the last few years the field of machine learning has made tremendous progress on addressing the difficult problem of image recognition.
One of the challenges with machine learning is figuring out how to deploy trained models into production environments.</description>
    </item>
    
    <item>
      <title>Year Of Commits: simple systray program in Go</title>
      <link>/year-of-commits/</link>
      <pubDate>Tue, 02 Jan 2018 14:35:14 +0700</pubDate>
      
      <guid>/year-of-commits/</guid>
      <description>Happy New Year Gophers! One of my goals for 2018 is to commit a code to GitHub every single day. So &amp;ldquo;Contributions&amp;rdquo; on GitHub will look like this:
To track this process I decided to write a Go program, which will be always in my tray, and which will show how many days in a row I committed something to Github.
Tadaa! yearofcommits
It&amp;rsquo;s a single-file command line tool using the following packages:</description>
    </item>
    
    <item>
      <title>Practice Go: Mosaic Photo</title>
      <link>/practice-go-mosaicphoto/</link>
      <pubDate>Mon, 01 Jan 2018 18:40:39 +0700</pubDate>
      
      <guid>/practice-go-mosaicphoto/</guid>
      <description>Your mission is to write a mosaic-photo generating command line program that:
 Allows the user to select a target picture. Allows the user to select a directory containing a set of tile pictures. Generates a mosaic-photo of the target picture using the tile pictures.  Requirements  Try not to use 3rd party libraries. png-only support. Size of the output photo should be the same as size of target photo.</description>
    </item>
    
    <item>
      <title>packagemain: Youtube channel about Programming in Go</title>
      <link>/packagemain/</link>
      <pubDate>Mon, 25 Dec 2017 23:31:33 +0700</pubDate>
      
      <guid>/packagemain/</guid>
      <description>I&amp;rsquo;m really enjoying to share some stuff about Golang and related technologies. I am blogging here and also on dev.to.
But I want to try the new way to share things, by doing live streams or record a videos where I&amp;rsquo;ll share my screen and we can implement together some interesting functionality.
So I just created a channel packagemain where I share the following topics: - Programming in Go - Go code review - Solving Algorithms with Go - Implement Bots with NLP - Performance optimizations</description>
    </item>
    
    <item>
      <title>Go tools are awesome</title>
      <link>/go-tools-are-awesome/</link>
      <pubDate>Mon, 11 Dec 2017 10:39:55 +0700</pubDate>
      
      <guid>/go-tools-are-awesome/</guid>
      <description>Yes, they are. And that&amp;rsquo;s why I love Go. Almost all important tools come together with Go installation, but there are also some you can install additionally depends on your needs: golint, errcheck, etc.
Let&amp;rsquo;s start with standard Go tools.
go get The most common way to install a Go package is to use a go get. If you need fixed versions you may use dep for dependencies management. go get downloads the packages named by the import paths, along with their dependencies.</description>
    </item>
    
    <item>
      <title>Create a bot with NLU in Python</title>
      <link>/create-bot-with-nlu-in-python/</link>
      <pubDate>Sun, 26 Nov 2017 13:23:53 +0700</pubDate>
      
      <guid>/create-bot-with-nlu-in-python/</guid>
      <description>At Wizeline we have Python courses, and recent topic was how to build a Bot in Python. I always wanted to try Natural Language Understanding (NLU) as a subtopic of natural language processing in artificial intelligence that deals with machine reading comprehension.
As we use Python, I checked which libraries we already have to do it and I decided to try RASA NLU, a tool for understanding what is being said in short pieces of text.</description>
    </item>
    
    <item>
      <title>Practice Go: Print Spiral</title>
      <link>/practice-go-spiral/</link>
      <pubDate>Mon, 20 Nov 2017 14:54:59 +0700</pubDate>
      
      <guid>/practice-go-spiral/</guid>
      <description>Create a Pull Request for this exercise
Write a program that will display a spiral of n √ó n numbers. Make sure your program uses constant (or linear) space. This means, it is not allowed to build an array before printing it (or to build another data structure consuming space with O(pow n).
Sperate numbers with one space.
Example For example, here‚Äôs what the spiral looks like for n = 10:</description>
    </item>
    
    <item>
      <title>Coming soon: Microservices with Go Workshop, Vietnam, HCMC</title>
      <link>/microservices-with-go-workshop-vetnam/</link>
      <pubDate>Wed, 08 Nov 2017 15:30:11 +0700</pubDate>
      
      <guid>/microservices-with-go-workshop-vetnam/</guid>
      <description>One month ago Wizline organized the Microservices with Go Workshop in Mexico, GDL as part of Wizeline Academy
I am happy to announce that we&amp;rsquo;re opening Wizeline Academy now in Vietnam, HCMC. And we will do similar workshop here, don&amp;rsquo;t miss it.
 Date: December 9 FB Page Event Page  </description>
    </item>
    
    <item>
      <title>Practice Go: Missing Numbers</title>
      <link>/practice-go-missingnumbers/</link>
      <pubDate>Wed, 08 Nov 2017 08:29:17 +0700</pubDate>
      
      <guid>/practice-go-missingnumbers/</guid>
      <description> Create a Pull Request for this exercise
Given an array containing all the numbers from 1 to n except two, find the two missing numbers.
Example  missing([]int{4, 2, 3}) = []int{1, 5} missing([]int{1, 2, 3, 4}) = []int{5, 6}  Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>Practice Go: Secret Message</title>
      <link>/practice-go-secret-message/</link>
      <pubDate>Tue, 17 Oct 2017 22:08:41 +0700</pubDate>
      
      <guid>/practice-go-secret-message/</guid>
      <description>I just created a new challenge in Practice Go collection, happy to review all possible solutions and choose the best one.
Secret Message Create a function to decode a secret message, to do it you have to: - Sort the characters in the encoded string by the number of times this character appears in it (descending). - Now take the sorted string, and drop all the characters after (and including) the _.</description>
    </item>
    
    <item>
      <title>Snake over Telnet in Go</title>
      <link>/go-snake-telnet/</link>
      <pubDate>Fri, 13 Oct 2017 16:37:59 +0700</pubDate>
      
      <guid>/go-snake-telnet/</guid>
      <description>Telnet games were very popular some time ago, especially this Star Wars movie: telnet towel.blinkenlights.nl.
I wanted to create something in Go, and I wrote this Snake game over Telnet.
Go is awesome in this case, no need any dependencies to build this funny stuff.
Development go get github.com/plutov/go-snake-telnet go-snake-telnet --host localhost --port 8080  Contribute It&amp;rsquo;s open source project, so feel free to contribute - go-snake-telnet.</description>
    </item>
    
    <item>
      <title>Slack Stranger Bot in Go</title>
      <link>/slack-stranger-bot-in-go/</link>
      <pubDate>Thu, 12 Oct 2017 10:17:18 +0700</pubDate>
      
      <guid>/slack-stranger-bot-in-go/</guid>
      <description>I am enjoying writing programs in a short time, like in a Hackathon way. Here in Vietnam we don&amp;rsquo;t have Hackathons often, so yesterday I decided to make one for myself with a time limit in 3 hours. The goal was to build/deploy something that will work and people can try it. I decided to go with Bot for Slack (or another messenger in the future).
So I wrote this Stranger Bot to meet strangers in your Slack, explore new people.</description>
    </item>
    
    <item>
      <title>Benchmarking gRPC&#43;Protobuf vs HTTP&#43;JSON in Go</title>
      <link>/benchmark-grpc-protobuf-vs-http-json/</link>
      <pubDate>Sun, 08 Oct 2017 14:48:53 +0700</pubDate>
      
      <guid>/benchmark-grpc-protobuf-vs-http-json/</guid>
      <description>Simplest possible solution for communication between services is to use JSON over HTTP. Though JSON has many obvious advantages - it‚Äôs human readable, well understood, and typically performs well - it also has its issues. In the case of internal services the structured formats, such as Google‚Äôs Protocol Buffers, are a better choice than JSON for encoding data.
gRPC uses protobuf by default, and it&amp;rsquo;s faster because it&amp;rsquo;s binary and it&amp;rsquo;s type-safe.</description>
    </item>
    
    <item>
      <title>Building REST Server with Elixir</title>
      <link>/building-rest-server-with-elixir/</link>
      <pubDate>Fri, 06 Oct 2017 13:28:45 +0700</pubDate>
      
      <guid>/building-rest-server-with-elixir/</guid>
      <description>I always wanted to try Elixir because of it&amp;rsquo;s nice Erlang ecosystem and because it&amp;rsquo;s similar to Go in a lot of points. I was thinking what I can start with, and I decided to build, yes&amp;hellip; a REST server. It took me around 1 hour to install Elixir, and build a simple REST server using maru RESTful framework.
I built a small items API using JSON and Agent as storage.</description>
    </item>
    
    <item>
      <title>Handle HTTP Request Errors in Go</title>
      <link>/handle-http-request-errors-in-go/</link>
      <pubDate>Thu, 05 Oct 2017 08:36:05 +0700</pubDate>
      
      <guid>/handle-http-request-errors-in-go/</guid>
      <description>In this short post I want to discuss handling HTTP request errors in Go. I see people write code and they believe to be handling errors when making HTTP requests, but actually they are missing real errors.
Here is an example of simple http server and GET request to itself.
package main import ( &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; ) func main() { http.HandleFunc(&amp;quot;/500&amp;quot;, func(w http.ResponseWriter, r *http.Request) { w.WriteHeader(500) w.Write([]byte(&amp;quot;NOT-OK&amp;quot;)) }) go http.</description>
    </item>
    
    <item>
      <title>Wizeline Academy: Microservices with Go</title>
      <link>/wizeline-academy-microservices-with-go/</link>
      <pubDate>Sat, 30 Sep 2017 00:29:24 +0700</pubDate>
      
      <guid>/wizeline-academy-microservices-with-go/</guid>
      <description>What I like about Wizeline is that we have an amazing Academy, both internal and public. Yesterday I was in Mexico, Guadalajara office of Wizeline and I was doing a workshop about Microservices with Go.
The idea was to tell people about SOA approach, gRPC, Protocol Buffers and code a fictional application based on these principles in Go.
I am happy with results, especially when I saw how talented people are, even with new language for them.</description>
    </item>
    
    <item>
      <title>Practice Go. Coins</title>
      <link>/practice-go-coins/</link>
      <pubDate>Wed, 27 Sep 2017 04:44:01 +0700</pubDate>
      
      <guid>/practice-go-coins/</guid>
      <description>Create a Pull Request for this exercise
Coins Let Piles(n int) represent the number of different ways in which n coins can be separated into piles. For example, five coins can be separated into piles in exactly seven different ways, so Piles(5)=7.
OOOOO OOOO O OOO OO OOO O O OO OO O OO O O O O O O O O  Input 0 &amp;lt; n &amp;lt;= 1000000</description>
    </item>
    
    <item>
      <title>o means open. Simple CLI tool to open repository in browser.</title>
      <link>/o_simple_cli_to_open_repo_in_browser/</link>
      <pubDate>Tue, 15 Aug 2017 23:09:17 +0700</pubDate>
      
      <guid>/o_simple_cli_to_open_repo_in_browser/</guid>
      <description>Here is my small bash function! When you run it from the terminal it opens the GitHub/BitBucket/GitLab page in your browser for the git repository you are currently in. It has a short simple name o. I find myself doing this quite a lot as I am working with multiple repositories at the same time and switching to a browser, searching for correct link, etc.
Just type o :)</description>
    </item>
    
    <item>
      <title>Grammarly is a Must-Have Tool for Bloggers</title>
      <link>/grammarly-is-must-have-tool-for-bloggers/</link>
      <pubDate>Thu, 27 Jul 2017 12:11:13 +0700</pubDate>
      
      <guid>/grammarly-is-must-have-tool-for-bloggers/</guid>
      <description>English is not my native language, and I always feel that my texts which I post here are hard to read. Sometimes I find myself wondering something as basic as whether or not a sentence needs another comma. We use Grammarly at Wizeline for polishing our Client communication.
And I found that I can use it now for all posts in my blog. Grammarly has Free and Premium versions. Also, it has Chrome extension and Desktop application.</description>
    </item>
    
    <item>
      <title>Games based on Voice Recognition</title>
      <link>/voice-recognition-games/</link>
      <pubDate>Wed, 26 Jul 2017 14:50:34 +0700</pubDate>
      
      <guid>/voice-recognition-games/</guid>
      <description>Hi, folks!
Last Saturday I was very inspired by Alexa skills using server-side Swift talk organized by Wizeline Vietnam team. Speakers made a demo of how can we use Alex Skill in League of Legends (LoL). This Skill enables a user to retrieve the statistics of the enemy team mid-match using voice-enabled commands.
I went home with an idea of building a game, fully based on voice recognition, without any interface.</description>
    </item>
    
    <item>
      <title>Garbage Collection in Git</title>
      <link>/git-gc/</link>
      <pubDate>Fri, 21 Jul 2017 15:48:14 +0700</pubDate>
      
      <guid>/git-gc/</guid>
      <description>To understand git garbage collector, we need to understand how branches work. Branches are just pointers to commits that move whenever a new commit is created.
Any time you do git commit --amend or git rebase a new commit object is created. But what happens to the old one? Old commit objects stick around in the datastore. The reason you don‚Äôt see them is because there are no pointers to them.</description>
    </item>
    
    <item>
      <title>Using different Git emails</title>
      <link>/using-different-git-emails/</link>
      <pubDate>Sun, 09 Jul 2017 22:28:23 +0700</pubDate>
      
      <guid>/using-different-git-emails/</guid>
      <description>Usually at work and at home we use different Git name/email pairs, or even per project. Pushing with correct email guarantees that your commits will be authored with a correct user identity.
This configuration stored in .gitconfig file and looks like:
[user] name = Alex Pliutau email = home@example.com  Git 2.13 introduces conditional configuration includes. For now, the only supported condition is matching the filesystem path of the repository, but that&amp;rsquo;s exactly what we need in this case.</description>
    </item>
    
    <item>
      <title>Practice Go: Reverse Parentheses</title>
      <link>/practice-go-reverse-parentheses/</link>
      <pubDate>Fri, 23 Jun 2017 12:21:26 +0700</pubDate>
      
      <guid>/practice-go-reverse-parentheses/</guid>
      <description> Create a Pull Request for this exercise
Reverse Parentheses Complete the function that reverses characters in (possibly nested) parentheses in the input string. Input strings will always be well-formed with matching ()s.
Examples (bar) =&amp;gt; rab foo(bar)baz =&amp;gt; foorabbaz foo(bar(baz))blim =&amp;gt; foobazrabblim  Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>Working with DB datetime/date columns in Go</title>
      <link>/working-with-db-time-in-go/</link>
      <pubDate>Fri, 26 May 2017 13:27:00 +0700</pubDate>
      
      <guid>/working-with-db-time-in-go/</guid>
      <description>This post shows how to work with DATETIME/DATE columns in DB and use Go standard time.Time avoiding manual string parsing. This article contains examples using 2 packages: database/sql and github.com/go-sql-driver/mysql.
Retrieve nullable time field using NullTime type MySQL, PostgreSQL drivers in Go provide this nullable type which represents a time.Time that may be NULL. NullTime implements the Scanner interface so it can be used as a scan destination:
 Use parseTime=true Assuming you&amp;rsquo;re using the go-sql-driver/mysql you can ask the driver to scan DATE and DATETIME automatically to time.</description>
    </item>
    
    <item>
      <title>Practice Go: Function Frequency</title>
      <link>/practice-go-function-frequency/</link>
      <pubDate>Sat, 20 May 2017 15:44:32 +0700</pubDate>
      
      <guid>/practice-go-function-frequency/</guid>
      <description> Create a Pull Request for this exercise
Function Frequency Given a valid Go code in gocode.txt file find top-3 used functions. Don&amp;rsquo;t count function declaration. This is a static analysis: the question is not how often each function is actually executed at runtime, but how often it is used by the programmer.
Function format: FunctionFrequency(gocode []byte) []string
Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>What is your life purpose?</title>
      <link>/what_is_your_life_purpose/</link>
      <pubDate>Sat, 13 May 2017 16:39:24 +0700</pubDate>
      
      <guid>/what_is_your_life_purpose/</guid>
      <description>Each of us has a story. Own your story, it&amp;rsquo;s yours. Don&amp;rsquo;t pretend to be something you are not. Worrying about what people think blocks us from being real and unique. But being real is the highest truth.
People around us have a big influence over what we think and how we behave. But we need sometimes to distance ourselves from those influences and have times of silence so we can hear our true voice.</description>
    </item>
    
    <item>
      <title>Practice Go: First Letter, Last Letter game</title>
      <link>/practice-go-lastlettergame/</link>
      <pubDate>Sun, 07 May 2017 14:12:12 +0700</pubDate>
      
      <guid>/practice-go-lastlettergame/</guid>
      <description>Create a Pull Request for this exercise
First Letter, Last Letter game There is a game I played a lot in school. The game is called first letter, last letter. The object of this game is for one player to say a word apple, and for the other player to say a word that begins with the last letter of the previous word, i.e. elephant.
Task Using the following selection of English Pokemon names, generate a sequence with the highest possible number of Pokemon names where the subsequent name starts with the final letter of the previous name.</description>
    </item>
    
    <item>
      <title>Multi-stage Dockerfile for Golang application</title>
      <link>/multi-stage-dockerfile-for-golang-application/</link>
      <pubDate>Sun, 30 Apr 2017 12:47:27 +0700</pubDate>
      
      <guid>/multi-stage-dockerfile-for-golang-application/</guid>
      <description>A common workaround for building Golang application in Docker is to have 2 Dockerfiles - one to perform a build and another to ship the results of the first build without tooling in the first image. It called Builder Pattern.
Starting from Docker v17.0.5 it will be possible to do it via single Dockerfile using multi-stage builds.
Application Let&amp;rsquo;s start with &amp;ldquo;Hello world&amp;rdquo; application:
package main import &amp;quot;fmt&amp;quot; func main() { fmt.</description>
    </item>
    
    <item>
      <title>Useful Git global config and ignore rules</title>
      <link>/useful-global-git-config-and-ignore-rules/</link>
      <pubDate>Fri, 28 Apr 2017 10:47:24 +0700</pubDate>
      
      <guid>/useful-global-git-config-and-ignore-rules/</guid>
      <description>I am working with git every single day, from different machines and accounts. And all these hosts have the same global git configuration. I sync it using tiny bash script.
~/.gitconfig I have user-specific configuration located in ~/.gitconfig, you can check it here.
Common exclude rules, ignoring temporary files, IDE files, logs, binary files, etc. You don&amp;rsquo;t want to see them in repository, right?
[core] excludesfile = ~/.gitignore  Shortcuts for git clone:</description>
    </item>
    
    <item>
      <title>Different ways to block Go runtime forever</title>
      <link>/different-ways-to-block-go-runtime-forever/</link>
      <pubDate>Mon, 24 Apr 2017 20:39:13 +0700</pubDate>
      
      <guid>/different-ways-to-block-go-runtime-forever/</guid>
      <description>The current design of Go&amp;rsquo;s runtime assumes that the programmer is responsible for detecting when to terminate a goroutine and when to terminate the program. A program can be terminated in a normal way by calling os.Exit or by returning from the main() function. There are a lot of ways of blocking runtime forever, I will show all of them for better understanding of blocking in Go.
1. Using sync.</description>
    </item>
    
    <item>
      <title>Practice Go: Web Scraping</title>
      <link>/practice-go-webscraping/</link>
      <pubDate>Wed, 19 Apr 2017 20:32:35 +0700</pubDate>
      
      <guid>/practice-go-webscraping/</guid>
      <description> Create a Pull Request for this exercise
Web Scraping Create a function that finds the time from this http://tycho.usno.navy.mil/cgi-bin/timer.pl and then prints it by extracting the time by timezone code.
Examples //Apr. 19, 12:59:44 UTC GetTime(&amp;quot;UTC&amp;quot;)  Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>Practice Go: Roman Numerals</title>
      <link>/practice-go-romannumerals/</link>
      <pubDate>Wed, 05 Apr 2017 12:25:05 +0700</pubDate>
      
      <guid>/practice-go-romannumerals/</guid>
      <description>Create a Pull Request for this exercise
Create 2 functions:
 Encode(n int) (string, bool) - takes an integer as its parameter and returns a string containing the Roman numeral representation of that integer. Decode(s string) (int, bool) - takes a Roman numeral as its argument and returns its value as a numeric decimal integer.  Second bool parameter must be false if Encode/Decode is unable.
Examples // MCMXC, true Encode(1990) // 2008, true Decode(&amp;quot;MMVIII&amp;quot;)  Run tests with benchmarks go test -bench .</description>
    </item>
    
    <item>
      <title>How to build Go plugin with data inside</title>
      <link>/how-to-build-go-plugin-with-data-inside/</link>
      <pubDate>Tue, 04 Apr 2017 20:45:14 +0700</pubDate>
      
      <guid>/how-to-build-go-plugin-with-data-inside/</guid>
      <description>Go 1.8 gives us a new tool for creating shared libraries, called plugins! This new plugin buildmode is currently only supported on Linux. But what if we build plugin with data in binary format inside? So we can ship only one .so file.
I tried with go-bindata tool.
Plugin to find a city by http.Request It&amp;rsquo;s for experimental usage only!
This project contains an example with Go plugin which contains free GeoLite2 MaxMind&amp;rsquo;s database of ip addresses.</description>
    </item>
    
    <item>
      <title>Pros and Cons: Golang in a Monorepo</title>
      <link>/pros_and_cons_golang_in_monorepo/</link>
      <pubDate>Mon, 03 Apr 2017 12:47:55 +0700</pubDate>
      
      <guid>/pros_and_cons_golang_in_monorepo/</guid>
      <description>Monorepo - is a monolithic code repository which can contain different services (or whatever you want to call them), CLI, libraries, etc. Did you hear that Facebook/Google uses a giant monorepo? And they do it for reasons.
I tried both approaches in Go: with monorepo or with multirepo. And I personally prefer the first one (but of course depending on a project).
Advantage 1. Simplified organization A structure of your project is important for organization.</description>
    </item>
    
    <item>
      <title>Practice Go. Short Hash</title>
      <link>/practice-go-shorthash/</link>
      <pubDate>Thu, 30 Mar 2017 12:48:24 +0700</pubDate>
      
      <guid>/practice-go-shorthash/</guid>
      <description>Create a Pull Request for this exercise
This function can be used to generate short unique hashes, for example in URL shorteners. You&amp;rsquo;re given a dictionary of unique characters and max length of result hash. Please implement a function GenerateShortHashes(dictionary string, maxLen int) []string which generates all possible, unique hashes with minimum length 1 and maximum lenght maxLen.
Examples GenerateShortHashes(&amp;quot;ab&amp;quot;, 1) // []string{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;} GenerateShortHashes(&amp;quot;ab&amp;quot;, 2) // []string{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;aa&amp;quot;, &amp;quot;bb&amp;quot;, &amp;quot;ab&amp;quot;, &amp;quot;ba&amp;quot;} GenerateShortHashes(&amp;quot;ab&amp;quot;, 3) // []string{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;aa&amp;quot;, &amp;quot;bb&amp;quot;, &amp;quot;ab&amp;quot;, &amp;quot;ba&amp;quot;, &amp;quot;aaa&amp;quot;, &amp;quot;baa&amp;quot;, &amp;quot;aba&amp;quot;, &amp;quot;aab&amp;quot;, &amp;quot;bbb&amp;quot;, &amp;quot;abb&amp;quot;, &amp;quot;bab&amp;quot;, &amp;quot;bba&amp;quot;}  Note: sequence of hashes doesn&amp;rsquo;t matter.</description>
    </item>
    
    <item>
      <title>Practice Go. Build Word</title>
      <link>/practice-go-buildword/</link>
      <pubDate>Tue, 28 Mar 2017 17:31:07 +0700</pubDate>
      
      <guid>/practice-go-buildword/</guid>
      <description>Seems like previous exercise is a quite difficult to implement :) Here is a new one.
Build Word You have a word in lowercase. Your task is to write this word using the fragments you are given. Each element of fragments can be used more than once, but they cannot overlap. It is guaranteed that it&amp;rsquo;s always possible to write the word using the given fragments.
What is the minimum number of elements you have to use?</description>
    </item>
    
    <item>
      <title>How to use go-bindata with html/template</title>
      <link>/go-bindata-html-template/</link>
      <pubDate>Mon, 27 Mar 2017 14:26:12 +0700</pubDate>
      
      <guid>/go-bindata-html-template/</guid>
      <description>What is go-bindata and why do we need it? go-bindata converts any text or binary file into Go source code, which is useful for embedding data into Go programs. So you can build your whole project into 1 binary file for easier delivery.
html/template html/template&amp;rsquo;s functions Parse, ParseFiles works only with files on the filesystem, so we need to implement a port to work with both approaches: files or go-bindata.</description>
    </item>
    
    <item>
      <title>Golang tips. Part 1</title>
      <link>/golang_tips_1/</link>
      <pubDate>Thu, 23 Mar 2017 12:40:02 +0700</pubDate>
      
      <guid>/golang_tips_1/</guid>
      <description>Go is a simple and fun language, and as any other language, Go has a lot of unspoken tips.
Every single day I&amp;rsquo;m working with Go, participating in discussions and sharing it with my blog readers. And constantly I&amp;rsquo;m rethinking my approaches, patterns, etc. I started to collect these small tips is a text file, usually they don&amp;rsquo;t deserve separate blog post, so I will post them together from time to time if I have 10 of them.</description>
    </item>
    
    <item>
      <title>gh: a tiny tool to manage GitHub repositories in your GOPATH</title>
      <link>/gh_in_gopath/</link>
      <pubDate>Wed, 22 Mar 2017 15:54:14 +0700</pubDate>
      
      <guid>/gh_in_gopath/</guid>
      <description>As a Golang developer I have to clone a lot of packages/tools/etc into $GOPATH/src/github.com. Sometimes I do go get, sometimes it&amp;rsquo;s necessary to do a combination of mkdir + git clone. So to save my time I wrote a tiny function gh, that actually is the same as cd thatbut also can close repo if it doesn&amp;rsquo;t exist.
 Here it is, just add it to your ~/.bashrc:
gh() { if [[ $# -ne 2 ]]; then echo &amp;quot;USAGE: gh [user] [repo]&amp;quot; return fi GOPATH=${GOPATH:-$HOME/go} user_path=$GOPATH/src/github.</description>
    </item>
    
    <item>
      <title>Practice Go. Sum Decimal</title>
      <link>/practice-go-sumdecimal/</link>
      <pubDate>Mon, 20 Mar 2017 12:32:20 +0700</pubDate>
      
      <guid>/practice-go-sumdecimal/</guid>
      <description>Create a Pull Request for this exercise
You are given a number n. Your task is to return the sum of the first 1000 decimal places of the square root of n.
Example The square root of 2 equals 1.4142135623..., so the answer is calculated as 4 + 1 + 4 + 2 + 1 + ..., 1000 digits altogether equals 4482.
SumDecimal(2) = 4482  Run tests with benchmarks go test -bench .</description>
    </item>
    
    <item>
      <title>Practice Go: Word Ladder</title>
      <link>/practice-go-wordladder/</link>
      <pubDate>Fri, 10 Mar 2017 15:41:47 +0700</pubDate>
      
      <guid>/practice-go-wordladder/</guid>
      <description>Create a Pull Request for this exercise
Word Ladder Given two words and a dictionary, find the length of the shortest transformation sequence from first word to second word such that:
 Only one letter can be changed at a time. Each transformed word must exist in the dictionary.  Please write a function WordLadder(from string, to string, dic []string) int that returns the length of the shortest transformation sequence, or 0 if no such transformation sequence exists.</description>
    </item>
    
    <item>
      <title>Practice Go: Merge Sort</title>
      <link>/practice-go-merge-sort/</link>
      <pubDate>Wed, 08 Mar 2017 12:37:17 +0700</pubDate>
      
      <guid>/practice-go-merge-sort/</guid>
      <description>Create a Pull Request for this exercise
The merge sort is a recursive sort of order n*log(n). The basic idea is to split the collection into smaller groups by halving it until the groups only have one element or no elements. Then merge the groups back together so that their elements are in order. This is how the algorithm gets its divide and conquer description.
Please write a function MergeSort(input []int) []int to sort integers from the lowest to the highest.</description>
    </item>
    
    <item>
      <title>Practice Go. Exercise 4: Jaro distance</title>
      <link>/practice-go-jaro/</link>
      <pubDate>Fri, 03 Mar 2017 12:25:20 +0700</pubDate>
      
      <guid>/practice-go-jaro/</guid>
      <description>Create a Pull Request for this exercise
The Jaro distance is a measure of similarity between two strings. The higher the Jaro distance for two strings is, the more similar the strings are. The score is normalized such that 0 equates to no similarity and 1 is an exact match.
The Jaro score of 2 given strings is:
Where: - m is the number of matching characters - t is half the number of transpositions</description>
    </item>
    
    <item>
      <title>How to separate Unit and Integration tests in Go</title>
      <link>/separate_unit_integration_tests/</link>
      <pubDate>Thu, 02 Mar 2017 11:25:19 +0700</pubDate>
      
      <guid>/separate_unit_integration_tests/</guid>
      <description>Usually integration tests take long time, because they&amp;rsquo;re doing real requests to real system. And it&amp;rsquo;s not necessary to run them every time we type go test. For example we have Golang client to work with PayPal SDK, it has some exported functions to send data to PayPal, then parse response and handle errors. So I wrote test functions to check that our client works properly with the real system, and be aware if PayPal changes response format or error codes.</description>
    </item>
    
    <item>
      <title>Practice Go. Exercise 3: Anagrams</title>
      <link>/practice-go-anagram/</link>
      <pubDate>Tue, 28 Feb 2017 23:50:07 +0700</pubDate>
      
      <guid>/practice-go-anagram/</guid>
      <description> Create a Pull Request for this exercise
When two or more words are composed of the same characters, but in a different order, they are called anagrams. Write a function FindAnagrams(dictionary []string, word string) that will find all possible anagrams for the given string in a given dictionary.
Sample anagram:
&amp;quot;Madam Curie&amp;quot; = &amp;quot;Radium came&amp;quot;  Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>How to mock exec.Command in Go</title>
      <link>/how_to_mock_exec_command/</link>
      <pubDate>Mon, 27 Feb 2017 10:15:26 +0700</pubDate>
      
      <guid>/how_to_mock_exec_command/</guid>
      <description>In some of my projects we have code that needs to run external executables, and it&amp;rsquo;s very difficult to test them, especially when your function is based on some kind of stdout parcing. So how to mock these commands in Go? Let&amp;rsquo;s check how this goal is achieved in os/exec package. In exec_test.go we can see a helperCommand. When running go tests, the go tool compiles an executable from your code, runs it and passes all the flags.</description>
    </item>
    
    <item>
      <title>playgo - CLI tool to send .go file to the Go Playground</title>
      <link>/playgo/</link>
      <pubDate>Wed, 22 Feb 2017 20:21:15 +0700</pubDate>
      
      <guid>/playgo/</guid>
      <description>Usually when we share a runnable Go code we do: copy code, open Go Playground, paste code, click Share.
So playgo does it for you.
Installation and Usage go get -u github.com/plutov/playgo/cmd/playgo playgo helloworld.go https://play.golang.org/p/v3rrZLwEUC  I&amp;rsquo;m waiting for pull requests or issues if it&amp;rsquo;s interesting for you or you&amp;rsquo;ve found some bug.
Project on GitHub</description>
    </item>
    
    <item>
      <title>Practice Go. Exercise 2: Floyd&#39;s Triangle</title>
      <link>/practice-go-floyd/</link>
      <pubDate>Tue, 21 Feb 2017 11:56:01 +0700</pubDate>
      
      <guid>/practice-go-floyd/</guid>
      <description> Create a Pull Request for this exercise
Please provide a function FloydTriangle that returns a Floyd&amp;rsquo;s triangle matrix by given rows count.
Floyd&amp;rsquo;s triangle
1 2 3 4 5 6 7 8 9 10  Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>Go 1.8 released. What is new?</title>
      <link>/go18_release_whats_new/</link>
      <pubDate>Fri, 17 Feb 2017 10:32:23 +0700</pubDate>
      
      <guid>/go18_release_whats_new/</guid>
      <description>Go team has released new version on February 16. You can get it from the download page. To celebrate the release, Go User Groups around the world are holding release parties this week. Spread the word using hashtag #GoReleaseParty.
And in this article I will talk in short what&amp;rsquo;s new in Go 1.8.
HTTP graceful shutdown It is now possible to call srv.Close() to halt an http.Server immediately, or srv.</description>
    </item>
    
    <item>
      <title>Practice Go. Exercise 1: Chess</title>
      <link>/practice-go-chess/</link>
      <pubDate>Wed, 15 Feb 2017 12:12:35 +0700</pubDate>
      
      <guid>/practice-go-chess/</guid>
      <description>Today I want to introduce the &amp;ldquo;Practice Go&amp;rdquo;, a collection of different Go exercises. Every week I will post/push a new exercise without a solution, so anyone can solve it via PR. I will select the fastest and more elegant solution and merge it into the master. If my solution is better, I will post it :)
Exercise 1: Chess You can find a Chess exercise here and you have a week to solve it.</description>
    </item>
    
    <item>
      <title>Add a Watermark to the image with image go package</title>
      <link>/watermark_image_pkg/</link>
      <pubDate>Mon, 21 Nov 2016 22:42:17 +0700</pubDate>
      
      <guid>/watermark_image_pkg/</guid>
      <description>Go is very rich for packages support. But I also can say that Go is a perfect language to write almost everything with help of stdlib only. At Weelco we are generating some images with watermarks in Go, and we are using only image package.
Here is a simplified example of this process:
package main import ( &amp;quot;image&amp;quot; &amp;quot;image/draw&amp;quot; &amp;quot;image/jpeg&amp;quot; &amp;quot;image/png&amp;quot; &amp;quot;os&amp;quot; ) // Error handling skipped for more clear example func main() { // Open and decode source JPG original, _ := os.</description>
    </item>
    
    <item>
      <title>Use Go Fonts in Atom</title>
      <link>/go_fonts/</link>
      <pubDate>Mon, 21 Nov 2016 12:42:54 +0700</pubDate>
      
      <guid>/go_fonts/</guid>
      <description>Just a few days ago Go team has announced Go font called &amp;ldquo;Go Mono&amp;rdquo;. Go source code looks good when displayed in Go Mono. Also go fonts are licensed under the same open source license as the rest Go projects have.
Here is an example how it looks in my Atom.
Get fonts git clone https://go.googlesource.com/image  Double-click on font/gofont/ttfs/Go-Mono.ttf to open a font and click &amp;ldquo;Install&amp;rdquo;:
Configure Atom or any other editor Find font settings in the editor and set a font family as &amp;ldquo;Go Mono&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>Perfect func main()</title>
      <link>/perfect_func_main/</link>
      <pubDate>Wed, 16 Nov 2016 17:07:40 +0700</pubDate>
      
      <guid>/perfect_func_main/</guid>
      <description>It&amp;rsquo;s the only one function all Go commands must have. You may say that everyone&amp;rsquo;s main() function is different, depends on a project. But let&amp;rsquo;s think about reusability and testability. main() function cannot be tested in a good way, also it cannot be imported and used in another go project. So all you code you put into it isn&amp;rsquo;t reusable/testable.
Instead of having some logic in main() function it&amp;rsquo;s better to isolate it in some package and just import it.</description>
    </item>
    
    <item>
      <title>Swaggerize your APIs</title>
      <link>/swaggerize-your-api/</link>
      <pubDate>Mon, 03 Oct 2016 12:27:19 +0700</pubDate>
      
      <guid>/swaggerize-your-api/</guid>
      <description>Swagger UI is a great tool and a must have for any respectable API project. It has an intuitive design, all endpoints can be tested from the interface. For example, let&amp;rsquo;s have a look at Kubernetes API, where endpoints are grouped by version, and everything is accessible in easy way. In this post I&amp;rsquo;ll show how to build it together with your API written in Go.
There are 2 separate parts: - Generate swagger.</description>
    </item>
    
    <item>
      <title>Golang Docker Skeleton</title>
      <link>/go-docker-skeleton/</link>
      <pubDate>Fri, 30 Sep 2016 14:11:48 +0700</pubDate>
      
      <guid>/go-docker-skeleton/</guid>
      <description>I really like templates and standards in the companies or a single team. Of course each company has it&amp;rsquo;s own application layout, because it depends on tools, people and goals. Also everyone wants to save a time. In the SOA century we have to create new projects, repositories more often and often, create Dockerfile again, think about layout, write a documentation. In this post I want to share my template created for Go applications that work in Docker, which I am using in my projects.</description>
    </item>
    
    <item>
      <title>Memory leaks with mux.Router in Go</title>
      <link>/memory_leaks_in_mux_router/</link>
      <pubDate>Thu, 22 Sep 2016 17:23:43 +0700</pubDate>
      
      <guid>/memory_leaks_in_mux_router/</guid>
      <description>Today we found that our web server written in Go has memory leaks and consume around 300M of memory, which is really a lot for our app. After restart it&amp;rsquo;s back to ~10M but each hour increased by few more. Golang has nice built-in tools to debug and find leaks.
import _ &amp;quot;net/http/pprof&amp;quot; // ... go func() { log.Println(http.ListenAndServe(&amp;quot;localhost:6060&amp;quot;, nil)) }()  go tool pprof http://localhost:6060/debug/pprof/heap (pprof) top ...  I have fixed one issue with not closed response.</description>
    </item>
    
    <item>
      <title>Go templates. Helper to render a struct</title>
      <link>/struct-render-helper/</link>
      <pubDate>Thu, 08 Sep 2016 10:17:34 +0700</pubDate>
      
      <guid>/struct-render-helper/</guid>
      <description>The Go language comes with a powerful built-in template engine. In Go, we have the template package to help handle templates. We can use functions like Parse, ParseFile and Execute to load templates from plain text or files, then evaluate the dynamic parts. Also it&amp;rsquo;s possible to create user-defined functions and call it from templates.
In real world (or good Go app architecture) all objects are described with help of Go structs.</description>
    </item>
    
    <item>
      <title>UUID without dependencies in Go</title>
      <link>/uuid-without-dependencies/</link>
      <pubDate>Fri, 26 Aug 2016 14:17:34 +0700</pubDate>
      
      <guid>/uuid-without-dependencies/</guid>
      <description>Today I realized that size of my vendor/ folder in Golang project is around 150M. I am using glide there. There are 24 dependencies (it&amp;rsquo;s a program with multiple data storage connectors, notifications, etc.), so I decided to review it and reduce amount of 3rd party libraries.
First of all I have checked glide-report and removed 2 unused packages. Go-world has a lot of packages that are awesome and can save your time, but not your program&amp;rsquo;s performance.</description>
    </item>
    
    <item>
      <title>Concurrency. Data race</title>
      <link>/concurrency-data-race/</link>
      <pubDate>Thu, 21 Jul 2016 07:52:29 +0700</pubDate>
      
      <guid>/concurrency-data-race/</guid>
      <description>What does data race mean in Golang? Data race is a common mistake in concurrent systems. A data race occurs when two goroutines access the same variable concurrently and at least one of the accesses is a write. It‚Äôs really hard to recognize it without specific tools or without an eagle eye, because when you run a program it‚Äôs always a chance that you won‚Äôt see your mistake or it will be very transparent.</description>
    </item>
    
    <item>
      <title>Working with ClickHouse in Go. Part 1: Basics</title>
      <link>/clickhouse-go-1/</link>
      <pubDate>Wed, 06 Jul 2016 16:15:39 +0700</pubDate>
      
      <guid>/clickhouse-go-1/</guid>
      <description>ClickHouse is an open-source column-oriented database management system that allows generating analytical data reports in real time. Created by Yandex developers for internal purposes, but then has migrated as open-source tool. It currently powers Yandex.Metrica, world‚Äôs second largest web analytics platform, with over 13 trillion database records and over 20 billion events a day, generating customized reports on-the-fly, directly from non-aggregated data. So it is really fast.
The reason I do really love ClickHouse is it supports SQL syntax.</description>
    </item>
    
    <item>
      <title>Game Of Logs: 2 tests about Go</title>
      <link>/game-of-logs/</link>
      <pubDate>Thu, 07 Apr 2016 13:21:51 +0700</pubDate>
      
      <guid>/game-of-logs/</guid>
      <description>In LogPacker we have prepared 4 interactive tests, 2 for Golang and 2 for Docker. Enjoy and share results!
Golang War I
Golang War II
All Games</description>
    </item>
    
    <item>
      <title>Working with DB nulls in Golang</title>
      <link>/working-with-db-nulls/</link>
      <pubDate>Thu, 07 Apr 2016 09:17:49 +0700</pubDate>
      
      <guid>/working-with-db-nulls/</guid>
      <description>This post shows how to marshall NULL values from the database into Go struct and how to avoid mistakes during fetching optional values with SELECT query. I&amp;rsquo;ll show standard types sql.NullString, sql.NullInt64, etc types.
Customer table example Customer table has mandatory ID and Email fields and optional Phone(string)/Age(int). I will show you a basic code how to fetch Customer by Email, marshall data into Go struct.
 Error Now let&amp;rsquo;s imagine that our Customer has an empty Phone (NULL in the DB), in this case SQL driver will fail to marshall DB NULL into string with the following error:</description>
    </item>
    
    <item>
      <title>GoMobile: Library development for IOS/Android</title>
      <link>/gomobile-library-development-for-ios-and-android/</link>
      <pubDate>Sun, 13 Mar 2016 15:11:13 +0700</pubDate>
      
      <guid>/gomobile-library-development-for-ios-and-android/</guid>
      <description>Read full article
Cross platform development of mobile applications was quite popular back then. This approach was used by most companies in the time of mobile branch establishment. The main reasons for using this approach were simple ‚Äì lack of professionals in the market, slow development speed and unreasonable cost. Unfortunately, in most cases this approach did not justify itself. But why not to give that approach the second chance? Technology took a big step forward and theoretically we can get a high-quality product.</description>
    </item>
    
    <item>
      <title>Optimize Go binary size</title>
      <link>/optimize-go-binary-size/</link>
      <pubDate>Tue, 01 Mar 2016 10:18:54 +0700</pubDate>
      
      <guid>/optimize-go-binary-size/</guid>
      <description>~21MB Well, I found yesterday that LogPacker Daemon weights about 21MB. This application is written in Go language, it&amp;rsquo;s really doing a lot of things, has built-in connectors to different Data-Storages, has Cluster solution inside, etc.
Some people are complaining about huge size of Go compiled binaries. But it makes sence, Go includes debugging information into binary for GDB.
go build logpacker_daemon.go &amp;amp;&amp;amp; du -h logpacker_daemon 21M	logpacker_daemon  ~15MB We distribute this binary to our customers, and they do not need to debug this tool, so I decided to turn off it.</description>
    </item>
    
    <item>
      <title>Quiz yourself in Golang. Part 1</title>
      <link>/go-lang-test/</link>
      <pubDate>Fri, 05 Feb 2016 18:08:43 +0700</pubDate>
      
      <guid>/go-lang-test/</guid>
      <description>30 basic questions to measure your Golang knowledge. Answers and .go files you can find on GitHub page.
Don&amp;rsquo;t hesitate to create a Pull Request in case of some found errors, typos.
What&amp;rsquo;s the output of the following code? package main import &amp;quot;fmt&amp;quot; const ( a = iota b = iota c = iota ) const ( d, e, f = iota, iota, iota ) func main() { fmt.Println(a, b, c, d, e, f) }   a.</description>
    </item>
    
    <item>
      <title>Docker test environment</title>
      <link>/docker-test-environment/</link>
      <pubDate>Sat, 30 Jan 2016 20:02:55 +0700</pubDate>
      
      <guid>/docker-test-environment/</guid>
      <description>My colleague Andrey Sinitsyn wrote a very nice article how we are testing LogPacker Cluster with help of Docker.
Original Article</description>
    </item>
    
    <item>
      <title>Measure performance changes with benchcmp</title>
      <link>/measure-performance-changes/</link>
      <pubDate>Tue, 26 Jan 2016 16:10:23 +0700</pubDate>
      
      <guid>/measure-performance-changes/</guid>
      <description>go test -bench=. Go has a great option to write your benchmarks and run it together with go test with option -bench. To create a benchmark function you must do the following:
package anonymizer import &amp;quot;testing&amp;quot; func BenchmarkAnonymizerShortString(b *testing.B) { for n := 0; n &amp;lt; b.N; n++ { Anonymizer(&amp;quot;This is a secret message with my private email john@gmail.com&amp;quot;) } } func BenchmarkAnonymizerLongString(b *testing.B) { for n := 0; n &amp;lt; b.</description>
    </item>
    
    <item>
      <title>Supported Go types for gomobile bind</title>
      <link>/gomobile-bind-types/</link>
      <pubDate>Mon, 25 Jan 2016 13:12:43 +0700</pubDate>
      
      <guid>/gomobile-bind-types/</guid>
      <description>gomobile bind With gomobile we can generate language bindings that make it possible to call Go functions from Java. And it&amp;rsquo;s awesome. Now you can write Android applications in Go (unfortunately without UI features and with pure SDK coverage, but I hope it will grow up from experiment to production-ready tool).
Requirements  golang 1.5+ go get golang.org/x/mobile/cmd/gomobile gomobile init Install Android SDK to ~/android-sdk-linux Install java-jdk  Playing with Go code Let&amp;rsquo;s create some artificial code and try to import it into Java.</description>
    </item>
    
    <item>
      <title>Go-client for PayPal API</title>
      <link>/go-client-for-paypal/</link>
      <pubDate>Thu, 21 Jan 2016 00:04:23 +0700</pubDate>
      
      <guid>/go-client-for-paypal/</guid>
      <description>Clients in Go There are official SDK libraries for PHP, Java and Python, but our service is written in GO, and in this case SDK search mostly fails. As a result we have found five projects on github, two of which seem worthily, but at the same time they have bounded functional:
 leebenson/paypal crowdmob/paypal  Contribute to Open Source So we decided to make a native client in Go with 100% API coverage.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/page/about/</link>
      <pubDate>Wed, 20 Jan 2016 14:10:50 +0700</pubDate>
      
      <guid>/page/about/</guid>
      <description>I&amp;rsquo;m a senior backend engineer with over 8 years of experience, currently working mostly with Go and Microservices, applying twelve-factor methodology. I&amp;rsquo;ve worked at both small and large companies bringing products from concept to release in a variety of environments.
Recently I started my YouTube channel about programming in Go üìπ.
If you think I&amp;rsquo;m a good fit for your organization, please drop an email at a.pliutau@gmail.com.
@pliutau</description>
    </item>
    
    <item>
      <title>Welcome to Alex Pliutau&#39;s blog</title>
      <link>/hello-folks/</link>
      <pubDate>Wed, 20 Jan 2016 14:10:50 +0700</pubDate>
      
      <guid>/hello-folks/</guid>
      <description>Let me introduce myself I started my blogging with Russian content at plutov.by. Then I decided to share my thoughts in English to reach more people interested in this stuff.
Currently I live and work in Saigon. Here we have an eCommerce project Lazada where I work as Team Lead in DevOps team.
What shall I post? Materials, examples, thoughts about Go, DevOps, PHP, CI/CD, open source and more.</description>
    </item>
    
  </channel>
</rss>