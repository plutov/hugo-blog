<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Experiment on Alex Pliutau</title>
    <link>/tags/experiment/</link>
    <description>Recent content in Experiment on Alex Pliutau</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Alex Pliutau</copyright>
    <lastBuildDate>Mon, 24 Apr 2017 20:39:13 +0700</lastBuildDate>
    
	<atom:link href="/tags/experiment/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Different ways to block Go runtime forever</title>
      <link>/different-ways-to-block-go-runtime-forever/</link>
      <pubDate>Mon, 24 Apr 2017 20:39:13 +0700</pubDate>
      
      <guid>/different-ways-to-block-go-runtime-forever/</guid>
      <description>The current design of Go&amp;rsquo;s runtime assumes that the programmer is responsible for detecting when to terminate a goroutine and when to terminate the program. A program can be terminated in a normal way by calling os.Exit or by returning from the main() function. There are a lot of ways of blocking runtime forever, I will show all of them for better understanding of blocking in Go.
1. Using sync.</description>
    </item>
    
  </channel>
</rss>