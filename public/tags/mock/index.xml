<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mock on Alex Pliutau</title>
    <link>/tags/mock/</link>
    <description>Recent content in Mock on Alex Pliutau</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Alex Pliutau</copyright>
    <lastBuildDate>Mon, 27 Feb 2017 10:15:26 +0700</lastBuildDate>
    
	<atom:link href="/tags/mock/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to mock exec.Command in Go</title>
      <link>/how_to_mock_exec_command/</link>
      <pubDate>Mon, 27 Feb 2017 10:15:26 +0700</pubDate>
      
      <guid>/how_to_mock_exec_command/</guid>
      <description>In some of my projects we have code that needs to run external executables, and it&amp;rsquo;s very difficult to test them, especially when your function is based on some kind of stdout parcing. So how to mock these commands in Go? Let&amp;rsquo;s check how this goal is achieved in os/exec package. In exec_test.go we can see a helperCommand. When running go tests, the go tool compiles an executable from your code, runs it and passes all the flags.</description>
    </item>
    
  </channel>
</rss>