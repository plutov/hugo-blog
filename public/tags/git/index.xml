<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Alex Pliutau</title>
    <link>/tags/git/</link>
    <description>Recent content in Git on Alex Pliutau</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Alex Pliutau</copyright>
    <lastBuildDate>Tue, 15 Aug 2017 23:09:17 +0700</lastBuildDate>
    
	<atom:link href="/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>o means open. Simple CLI tool to open repository in browser.</title>
      <link>/o_simple_cli_to_open_repo_in_browser/</link>
      <pubDate>Tue, 15 Aug 2017 23:09:17 +0700</pubDate>
      
      <guid>/o_simple_cli_to_open_repo_in_browser/</guid>
      <description>Here is my small bash function! When you run it from the terminal it opens the GitHub/BitBucket/GitLab page in your browser for the git repository you are currently in. It has a short simple name o. I find myself doing this quite a lot as I am working with multiple repositories at the same time and switching to a browser, searching for correct link, etc.
Just type o :)</description>
    </item>
    
    <item>
      <title>Garbage Collection in Git</title>
      <link>/git-gc/</link>
      <pubDate>Fri, 21 Jul 2017 15:48:14 +0700</pubDate>
      
      <guid>/git-gc/</guid>
      <description>To understand git garbage collector, we need to understand how branches work. Branches are just pointers to commits that move whenever a new commit is created.
Any time you do git commit --amend or git rebase a new commit object is created. But what happens to the old one? Old commit objects stick around in the datastore. The reason you donâ€™t see them is because there are no pointers to them.</description>
    </item>
    
    <item>
      <title>Using different Git emails</title>
      <link>/using-different-git-emails/</link>
      <pubDate>Sun, 09 Jul 2017 22:28:23 +0700</pubDate>
      
      <guid>/using-different-git-emails/</guid>
      <description>Usually at work and at home we use different Git name/email pairs, or even per project. Pushing with correct email guarantees that your commits will be authored with a correct user identity.
This configuration stored in .gitconfig file and looks like:
[user] name = Alex Pliutau email = home@example.com  Git 2.13 introduces conditional configuration includes. For now, the only supported condition is matching the filesystem path of the repository, but that&amp;rsquo;s exactly what we need in this case.</description>
    </item>
    
    <item>
      <title>Useful Git global config and ignore rules</title>
      <link>/useful-global-git-config-and-ignore-rules/</link>
      <pubDate>Fri, 28 Apr 2017 10:47:24 +0700</pubDate>
      
      <guid>/useful-global-git-config-and-ignore-rules/</guid>
      <description>I am working with git every single day, from different machines and accounts. And all these hosts have the same global git configuration. I sync it using tiny bash script.
~/.gitconfig I have user-specific configuration located in ~/.gitconfig, you can check it here.
Common exclude rules, ignoring temporary files, IDE files, logs, binary files, etc. You don&amp;rsquo;t want to see them in repository, right?
[core] excludesfile = ~/.gitignore  Shortcuts for git clone:</description>
    </item>
    
    <item>
      <title>gh: a tiny tool to manage GitHub repositories in your GOPATH</title>
      <link>/gh_in_gopath/</link>
      <pubDate>Wed, 22 Mar 2017 15:54:14 +0700</pubDate>
      
      <guid>/gh_in_gopath/</guid>
      <description>As a Golang developer I have to clone a lot of packages/tools/etc into $GOPATH/src/github.com. Sometimes I do go get, sometimes it&amp;rsquo;s necessary to do a combination of mkdir + git clone. So to save my time I wrote a tiny function gh, that actually is the same as cd thatbut also can close repo if it doesn&amp;rsquo;t exist.
 Here it is, just add it to your ~/.bashrc:
gh() { if [[ $# -ne 2 ]]; then echo &amp;quot;USAGE: gh [user] [repo]&amp;quot; return fi GOPATH=${GOPATH:-$HOME/go} user_path=$GOPATH/src/github.</description>
    </item>
    
  </channel>
</rss>