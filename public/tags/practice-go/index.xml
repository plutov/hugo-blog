<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Practice Go on Alex Pliutau</title>
    <link>/tags/practice-go/</link>
    <description>Recent content in Practice Go on Alex Pliutau</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Alex Pliutau</copyright>
    <lastBuildDate>Tue, 18 Sep 2018 15:51:00 +0700</lastBuildDate>
    
	<atom:link href="/tags/practice-go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Practice Go. Find Broken Node</title>
      <link>/practice-go-broken-node/</link>
      <pubDate>Tue, 18 Sep 2018 15:51:00 +0700</pubDate>
      
      <guid>/practice-go-broken-node/</guid>
      <description>Create a Pull Request for this exercise
We have a chain of nodes, the functionality of each node is to find if next node is working well. Unfortunately, we recently found that some of our nodes are broken.
Each node checked next node and we have a report about it. We can totally trust reports made by working nodes, but broken nodes could return wrong results, so we can&amp;rsquo;t trust them.</description>
    </item>
    
    <item>
      <title>Practice Go: Warriors</title>
      <link>/practice-go-warriors/</link>
      <pubDate>Tue, 24 Jul 2018 14:36:06 +0700</pubDate>
      
      <guid>/practice-go-warriors/</guid>
      <description>Create a Pull Request for this exercise
BitVille and ByteVille are 2 warring tribes. BitVille has a spy telescope called the Hobble Scope, to count the number of Byte Warriors in ByteVille. The Hobble Scope, however, has a problem. Its primary lens is contaminated with bugs which block part of each image. The Hobble Scope&amp;rsquo;s flawed images are stored by pixels in a file.
Each image is square and each pixel or cell contains either a 0 or a 1.</description>
    </item>
    
    <item>
      <title>Practice Go: Print Spiral</title>
      <link>/practice-go-spiral/</link>
      <pubDate>Mon, 20 Nov 2017 14:54:59 +0700</pubDate>
      
      <guid>/practice-go-spiral/</guid>
      <description>Create a Pull Request for this exercise
Write a program that will display a spiral of n × n numbers. Make sure your program uses constant (or linear) space. This means, it is not allowed to build an array before printing it (or to build another data structure consuming space with O(pow n).
Sperate numbers with one space.
Example For example, here’s what the spiral looks like for n = 10:</description>
    </item>
    
    <item>
      <title>Practice Go: Missing Numbers</title>
      <link>/practice-go-missingnumbers/</link>
      <pubDate>Wed, 08 Nov 2017 08:29:17 +0700</pubDate>
      
      <guid>/practice-go-missingnumbers/</guid>
      <description> Create a Pull Request for this exercise
Given an array containing all the numbers from 1 to n except two, find the two missing numbers.
Example  missing([]int{4, 2, 3}) = []int{1, 5} missing([]int{1, 2, 3, 4}) = []int{5, 6}  Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>Practice Go. Coins</title>
      <link>/practice-go-coins/</link>
      <pubDate>Wed, 27 Sep 2017 04:44:01 +0700</pubDate>
      
      <guid>/practice-go-coins/</guid>
      <description>Create a Pull Request for this exercise
Coins Let Piles(n int) represent the number of different ways in which n coins can be separated into piles. For example, five coins can be separated into piles in exactly seven different ways, so Piles(5)=7.
OOOOO OOOO O OOO OO OOO O O OO OO O OO O O O O O O O O  Input 0 &amp;lt; n &amp;lt;= 1000000</description>
    </item>
    
    <item>
      <title>Practice Go: Reverse Parentheses</title>
      <link>/practice-go-reverse-parentheses/</link>
      <pubDate>Fri, 23 Jun 2017 12:21:26 +0700</pubDate>
      
      <guid>/practice-go-reverse-parentheses/</guid>
      <description> Create a Pull Request for this exercise
Reverse Parentheses Complete the function that reverses characters in (possibly nested) parentheses in the input string. Input strings will always be well-formed with matching ()s.
Examples (bar) =&amp;gt; rab foo(bar)baz =&amp;gt; foorabbaz foo(bar(baz))blim =&amp;gt; foobazrabblim  Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>Practice Go: Function Frequency</title>
      <link>/practice-go-function-frequency/</link>
      <pubDate>Sat, 20 May 2017 15:44:32 +0700</pubDate>
      
      <guid>/practice-go-function-frequency/</guid>
      <description> Create a Pull Request for this exercise
Function Frequency Given a valid Go code in gocode.txt file find top-3 used functions. Don&amp;rsquo;t count function declaration. This is a static analysis: the question is not how often each function is actually executed at runtime, but how often it is used by the programmer.
Function format: FunctionFrequency(gocode []byte) []string
Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>Practice Go: First Letter, Last Letter game</title>
      <link>/practice-go-lastlettergame/</link>
      <pubDate>Sun, 07 May 2017 14:12:12 +0700</pubDate>
      
      <guid>/practice-go-lastlettergame/</guid>
      <description>Create a Pull Request for this exercise
First Letter, Last Letter game There is a game I played a lot in school. The game is called first letter, last letter. The object of this game is for one player to say a word apple, and for the other player to say a word that begins with the last letter of the previous word, i.e. elephant.
Task Using the following selection of English Pokemon names, generate a sequence with the highest possible number of Pokemon names where the subsequent name starts with the final letter of the previous name.</description>
    </item>
    
    <item>
      <title>Practice Go: Web Scraping</title>
      <link>/practice-go-webscraping/</link>
      <pubDate>Wed, 19 Apr 2017 20:32:35 +0700</pubDate>
      
      <guid>/practice-go-webscraping/</guid>
      <description> Create a Pull Request for this exercise
Web Scraping Create a function that finds the time from this http://tycho.usno.navy.mil/cgi-bin/timer.pl and then prints it by extracting the time by timezone code.
Examples //Apr. 19, 12:59:44 UTC GetTime(&amp;quot;UTC&amp;quot;)  Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>Practice Go: Roman Numerals</title>
      <link>/practice-go-romannumerals/</link>
      <pubDate>Wed, 05 Apr 2017 12:25:05 +0700</pubDate>
      
      <guid>/practice-go-romannumerals/</guid>
      <description>Create a Pull Request for this exercise
Create 2 functions:
 Encode(n int) (string, bool) - takes an integer as its parameter and returns a string containing the Roman numeral representation of that integer. Decode(s string) (int, bool) - takes a Roman numeral as its argument and returns its value as a numeric decimal integer.  Second bool parameter must be false if Encode/Decode is unable.
Examples // MCMXC, true Encode(1990) // 2008, true Decode(&amp;quot;MMVIII&amp;quot;)  Run tests with benchmarks go test -bench .</description>
    </item>
    
    <item>
      <title>Practice Go. Short Hash</title>
      <link>/practice-go-shorthash/</link>
      <pubDate>Thu, 30 Mar 2017 12:48:24 +0700</pubDate>
      
      <guid>/practice-go-shorthash/</guid>
      <description>Create a Pull Request for this exercise
This function can be used to generate short unique hashes, for example in URL shorteners. You&amp;rsquo;re given a dictionary of unique characters and max length of result hash. Please implement a function GenerateShortHashes(dictionary string, maxLen int) []string which generates all possible, unique hashes with minimum length 1 and maximum lenght maxLen.
Examples GenerateShortHashes(&amp;quot;ab&amp;quot;, 1) // []string{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;} GenerateShortHashes(&amp;quot;ab&amp;quot;, 2) // []string{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;aa&amp;quot;, &amp;quot;bb&amp;quot;, &amp;quot;ab&amp;quot;, &amp;quot;ba&amp;quot;} GenerateShortHashes(&amp;quot;ab&amp;quot;, 3) // []string{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;aa&amp;quot;, &amp;quot;bb&amp;quot;, &amp;quot;ab&amp;quot;, &amp;quot;ba&amp;quot;, &amp;quot;aaa&amp;quot;, &amp;quot;baa&amp;quot;, &amp;quot;aba&amp;quot;, &amp;quot;aab&amp;quot;, &amp;quot;bbb&amp;quot;, &amp;quot;abb&amp;quot;, &amp;quot;bab&amp;quot;, &amp;quot;bba&amp;quot;}  Note: sequence of hashes doesn&amp;rsquo;t matter.</description>
    </item>
    
    <item>
      <title>Practice Go. Build Word</title>
      <link>/practice-go-buildword/</link>
      <pubDate>Tue, 28 Mar 2017 17:31:07 +0700</pubDate>
      
      <guid>/practice-go-buildword/</guid>
      <description>Seems like previous exercise is a quite difficult to implement :) Here is a new one.
Build Word You have a word in lowercase. Your task is to write this word using the fragments you are given. Each element of fragments can be used more than once, but they cannot overlap. It is guaranteed that it&amp;rsquo;s always possible to write the word using the given fragments.
What is the minimum number of elements you have to use?</description>
    </item>
    
    <item>
      <title>Practice Go. Sum Decimal</title>
      <link>/practice-go-sumdecimal/</link>
      <pubDate>Mon, 20 Mar 2017 12:32:20 +0700</pubDate>
      
      <guid>/practice-go-sumdecimal/</guid>
      <description>Create a Pull Request for this exercise
You are given a number n. Your task is to return the sum of the first 1000 decimal places of the square root of n.
Example The square root of 2 equals 1.4142135623..., so the answer is calculated as 4 + 1 + 4 + 2 + 1 + ..., 1000 digits altogether equals 4482.
SumDecimal(2) = 4482  Run tests with benchmarks go test -bench .</description>
    </item>
    
    <item>
      <title>Practice Go: Word Ladder</title>
      <link>/practice-go-wordladder/</link>
      <pubDate>Fri, 10 Mar 2017 15:41:47 +0700</pubDate>
      
      <guid>/practice-go-wordladder/</guid>
      <description>Create a Pull Request for this exercise
Word Ladder Given two words and a dictionary, find the length of the shortest transformation sequence from first word to second word such that:
 Only one letter can be changed at a time. Each transformed word must exist in the dictionary.  Please write a function WordLadder(from string, to string, dic []string) int that returns the length of the shortest transformation sequence, or 0 if no such transformation sequence exists.</description>
    </item>
    
    <item>
      <title>Practice Go: Merge Sort</title>
      <link>/practice-go-merge-sort/</link>
      <pubDate>Wed, 08 Mar 2017 12:37:17 +0700</pubDate>
      
      <guid>/practice-go-merge-sort/</guid>
      <description>Create a Pull Request for this exercise
The merge sort is a recursive sort of order n*log(n). The basic idea is to split the collection into smaller groups by halving it until the groups only have one element or no elements. Then merge the groups back together so that their elements are in order. This is how the algorithm gets its divide and conquer description.
Please write a function MergeSort(input []int) []int to sort integers from the lowest to the highest.</description>
    </item>
    
    <item>
      <title>Practice Go. Exercise 4: Jaro distance</title>
      <link>/practice-go-jaro/</link>
      <pubDate>Fri, 03 Mar 2017 12:25:20 +0700</pubDate>
      
      <guid>/practice-go-jaro/</guid>
      <description>Create a Pull Request for this exercise
The Jaro distance is a measure of similarity between two strings. The higher the Jaro distance for two strings is, the more similar the strings are. The score is normalized such that 0 equates to no similarity and 1 is an exact match.
The Jaro score of 2 given strings is:
Where: - m is the number of matching characters - t is half the number of transpositions</description>
    </item>
    
    <item>
      <title>Practice Go. Exercise 3: Anagrams</title>
      <link>/practice-go-anagram/</link>
      <pubDate>Tue, 28 Feb 2017 23:50:07 +0700</pubDate>
      
      <guid>/practice-go-anagram/</guid>
      <description> Create a Pull Request for this exercise
When two or more words are composed of the same characters, but in a different order, they are called anagrams. Write a function FindAnagrams(dictionary []string, word string) that will find all possible anagrams for the given string in a given dictionary.
Sample anagram:
&amp;quot;Madam Curie&amp;quot; = &amp;quot;Radium came&amp;quot;  Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>Practice Go. Exercise 2: Floyd&#39;s Triangle</title>
      <link>/practice-go-floyd/</link>
      <pubDate>Tue, 21 Feb 2017 11:56:01 +0700</pubDate>
      
      <guid>/practice-go-floyd/</guid>
      <description> Create a Pull Request for this exercise
Please provide a function FloydTriangle that returns a Floyd&amp;rsquo;s triangle matrix by given rows count.
Floyd&amp;rsquo;s triangle
1 2 3 4 5 6 7 8 9 10  Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>Practice Go. Exercise 1: Chess</title>
      <link>/practice-go-chess/</link>
      <pubDate>Wed, 15 Feb 2017 12:12:35 +0700</pubDate>
      
      <guid>/practice-go-chess/</guid>
      <description>Today I want to introduce the &amp;ldquo;Practice Go&amp;rdquo;, a collection of different Go exercises. Every week I will post/push a new exercise without a solution, so anyone can solve it via PR. I will select the fastest and more elegant solution and merge it into the master. If my solution is better, I will post it :)
Exercise 1: Chess You can find a Chess exercise here and you have a week to solve it.</description>
    </item>
    
  </channel>
</rss>