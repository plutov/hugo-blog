<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Alex Pliutau</title>
    <link>/tags/golang/</link>
    <description>Recent content in Golang on Alex Pliutau</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Alex Pliutau</copyright>
    <lastBuildDate>Fri, 19 Jan 2018 10:32:25 +0700</lastBuildDate>
    
	<atom:link href="/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Face Detection in Go using OpenCV and MachineBox</title>
      <link>/face-detection-in-go-machinebox-opencv/</link>
      <pubDate>Fri, 19 Jan 2018 10:32:25 +0700</pubDate>
      
      <guid>/face-detection-in-go-machinebox-opencv/</guid>
      <description>This is a text version of this video: packagemain #5: Face Detection in Go using OpenCV and MachineBox.
I found a very nice developer-friendly project MachineBox, which provides some machine learning tools inside Docker Container, including face detection, natural language understanding and few more. And it has SDK in Go, so we will build a program which will detect my face. We will also use OpenCV to capture video from Web camera, it also has Go bindings.</description>
    </item>
    
    <item>
      <title>Image Recognition in Go using Tensorflow</title>
      <link>/image-recognition-in-go-using-tensorflow/</link>
      <pubDate>Mon, 08 Jan 2018 17:25:16 +0700</pubDate>
      
      <guid>/image-recognition-in-go-using-tensorflow/</guid>
      <description>This is a text version of this video: packagemain #4: Image Recognition in Go using Tensorflow.
Tensorflow is a computation library that represents computations with graphs. Its core is implemented in C++ and there are also bindings for different languages, including Go.
In the last few years the field of machine learning has made tremendous progress on addressing the difficult problem of image recognition.
One of the challenges with machine learning is figuring out how to deploy trained models into production environments.</description>
    </item>
    
    <item>
      <title>Practice Go: Print Spiral</title>
      <link>/practice-go-spiral/</link>
      <pubDate>Mon, 20 Nov 2017 14:54:59 +0700</pubDate>
      
      <guid>/practice-go-spiral/</guid>
      <description>Create a Pull Request for this exercise
Write a program that will display a spiral of n × n numbers. Make sure your program uses constant (or linear) space. This means, it is not allowed to build an array before printing it (or to build another data structure consuming space with O(pow n).
Sperate numbers with one space.
Example For example, here’s what the spiral looks like for n = 10:</description>
    </item>
    
    <item>
      <title>Practice Go: Missing Numbers</title>
      <link>/practice-go-missingnumbers/</link>
      <pubDate>Wed, 08 Nov 2017 08:29:17 +0700</pubDate>
      
      <guid>/practice-go-missingnumbers/</guid>
      <description> Create a Pull Request for this exercise
Given an array containing all the numbers from 1 to n except two, find the two missing numbers.
Example  missing([]int{4, 2, 3}) = []int{1, 5} missing([]int{1, 2, 3, 4}) = []int{5, 6}  Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>Practice Go: Reverse Parentheses</title>
      <link>/practice-go-reverse-parentheses/</link>
      <pubDate>Fri, 23 Jun 2017 12:21:26 +0700</pubDate>
      
      <guid>/practice-go-reverse-parentheses/</guid>
      <description> Create a Pull Request for this exercise
Reverse Parentheses Complete the function that reverses characters in (possibly nested) parentheses in the input string. Input strings will always be well-formed with matching ()s.
Examples (bar) =&amp;gt; rab foo(bar)baz =&amp;gt; foorabbaz foo(bar(baz))blim =&amp;gt; foobazrabblim  Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>Working with DB datetime/date columns in Go</title>
      <link>/working-with-db-time-in-go/</link>
      <pubDate>Fri, 26 May 2017 13:27:00 +0700</pubDate>
      
      <guid>/working-with-db-time-in-go/</guid>
      <description>This post shows how to work with DATETIME/DATE columns in DB and use Go standard time.Time avoiding manual string parsing. This article contains examples using 2 packages: database/sql and github.com/go-sql-driver/mysql.
Retrieve nullable time field using NullTime type MySQL, PostgreSQL drivers in Go provide this nullable type which represents a time.Time that may be NULL. NullTime implements the Scanner interface so it can be used as a scan destination:
 Use parseTime=true Assuming you&amp;rsquo;re using the go-sql-driver/mysql you can ask the driver to scan DATE and DATETIME automatically to time.</description>
    </item>
    
    <item>
      <title>Practice Go: Function Frequency</title>
      <link>/practice-go-function-frequency/</link>
      <pubDate>Sat, 20 May 2017 15:44:32 +0700</pubDate>
      
      <guid>/practice-go-function-frequency/</guid>
      <description> Create a Pull Request for this exercise
Function Frequency Given a valid Go code in gocode.txt file find top-3 used functions. Don&amp;rsquo;t count function declaration. This is a static analysis: the question is not how often each function is actually executed at runtime, but how often it is used by the programmer.
Function format: FunctionFrequency(gocode []byte) []string
Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>Practice Go: First Letter, Last Letter game</title>
      <link>/practice-go-lastlettergame/</link>
      <pubDate>Sun, 07 May 2017 14:12:12 +0700</pubDate>
      
      <guid>/practice-go-lastlettergame/</guid>
      <description>Create a Pull Request for this exercise
First Letter, Last Letter game There is a game I played a lot in school. The game is called first letter, last letter. The object of this game is for one player to say a word apple, and for the other player to say a word that begins with the last letter of the previous word, i.e. elephant.
Task Using the following selection of English Pokemon names, generate a sequence with the highest possible number of Pokemon names where the subsequent name starts with the final letter of the previous name.</description>
    </item>
    
    <item>
      <title>Multi-stage Dockerfile for Golang application</title>
      <link>/multi-stage-dockerfile-for-golang-application/</link>
      <pubDate>Sun, 30 Apr 2017 12:47:27 +0700</pubDate>
      
      <guid>/multi-stage-dockerfile-for-golang-application/</guid>
      <description>A common workaround for building Golang application in Docker is to have 2 Dockerfiles - one to perform a build and another to ship the results of the first build without tooling in the first image. It called Builder Pattern.
Starting from Docker v17.0.5 it will be possible to do it via single Dockerfile using multi-stage builds.
Application Let&amp;rsquo;s start with &amp;ldquo;Hello world&amp;rdquo; application:
package main import &amp;quot;fmt&amp;quot; func main() { fmt.</description>
    </item>
    
    <item>
      <title>Different ways to block Go runtime forever</title>
      <link>/different-ways-to-block-go-runtime-forever/</link>
      <pubDate>Mon, 24 Apr 2017 20:39:13 +0700</pubDate>
      
      <guid>/different-ways-to-block-go-runtime-forever/</guid>
      <description>The current design of Go&amp;rsquo;s runtime assumes that the programmer is responsible for detecting when to terminate a goroutine and when to terminate the program. A program can be terminated in a normal way by calling os.Exit or by returning from the main() function. There are a lot of ways of blocking runtime forever, I will show all of them for better understanding of blocking in Go.
1. Using sync.</description>
    </item>
    
    <item>
      <title>Practice Go: Web Scraping</title>
      <link>/practice-go-webscraping/</link>
      <pubDate>Wed, 19 Apr 2017 20:32:35 +0700</pubDate>
      
      <guid>/practice-go-webscraping/</guid>
      <description> Create a Pull Request for this exercise
Web Scraping Create a function that finds the time from this http://tycho.usno.navy.mil/cgi-bin/timer.pl and then prints it by extracting the time by timezone code.
Examples //Apr. 19, 12:59:44 UTC GetTime(&amp;quot;UTC&amp;quot;)  Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>Practice Go: Roman Numerals</title>
      <link>/practice-go-romannumerals/</link>
      <pubDate>Wed, 05 Apr 2017 12:25:05 +0700</pubDate>
      
      <guid>/practice-go-romannumerals/</guid>
      <description>Create a Pull Request for this exercise
Create 2 functions:
 Encode(n int) (string, bool) - takes an integer as its parameter and returns a string containing the Roman numeral representation of that integer. Decode(s string) (int, bool) - takes a Roman numeral as its argument and returns its value as a numeric decimal integer.  Second bool parameter must be false if Encode/Decode is unable.
Examples // MCMXC, true Encode(1990) // 2008, true Decode(&amp;quot;MMVIII&amp;quot;)  Run tests with benchmarks go test -bench .</description>
    </item>
    
    <item>
      <title>How to build Go plugin with data inside</title>
      <link>/how-to-build-go-plugin-with-data-inside/</link>
      <pubDate>Tue, 04 Apr 2017 20:45:14 +0700</pubDate>
      
      <guid>/how-to-build-go-plugin-with-data-inside/</guid>
      <description>Go 1.8 gives us a new tool for creating shared libraries, called plugins! This new plugin buildmode is currently only supported on Linux. But what if we build plugin with data in binary format inside? So we can ship only one .so file.
I tried with go-bindata tool.
Plugin to find a city by http.Request It&amp;rsquo;s for experimental usage only!
This project contains an example with Go plugin which contains free GeoLite2 MaxMind&amp;rsquo;s database of ip addresses.</description>
    </item>
    
    <item>
      <title>Pros and Cons: Golang in a Monorepo</title>
      <link>/pros_and_cons_golang_in_monorepo/</link>
      <pubDate>Mon, 03 Apr 2017 12:47:55 +0700</pubDate>
      
      <guid>/pros_and_cons_golang_in_monorepo/</guid>
      <description>Monorepo - is a monolithic code repository which can contain different services (or whatever you want to call them), CLI, libraries, etc. Did you hear that Facebook/Google uses a giant monorepo? And they do it for reasons.
I tried both approaches in Go: with monorepo or with multirepo. And I personally prefer the first one (but of course depending on a project).
Advantage 1. Simplified organization A structure of your project is important for organization.</description>
    </item>
    
    <item>
      <title>Practice Go. Short Hash</title>
      <link>/practice-go-shorthash/</link>
      <pubDate>Thu, 30 Mar 2017 12:48:24 +0700</pubDate>
      
      <guid>/practice-go-shorthash/</guid>
      <description>Create a Pull Request for this exercise
This function can be used to generate short unique hashes, for example in URL shorteners. You&amp;rsquo;re given a dictionary of unique characters and max length of result hash. Please implement a function GenerateShortHashes(dictionary string, maxLen int) []string which generates all possible, unique hashes with minimum length 1 and maximum lenght maxLen.
Examples GenerateShortHashes(&amp;quot;ab&amp;quot;, 1) // []string{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;} GenerateShortHashes(&amp;quot;ab&amp;quot;, 2) // []string{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;aa&amp;quot;, &amp;quot;bb&amp;quot;, &amp;quot;ab&amp;quot;, &amp;quot;ba&amp;quot;} GenerateShortHashes(&amp;quot;ab&amp;quot;, 3) // []string{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;aa&amp;quot;, &amp;quot;bb&amp;quot;, &amp;quot;ab&amp;quot;, &amp;quot;ba&amp;quot;, &amp;quot;aaa&amp;quot;, &amp;quot;baa&amp;quot;, &amp;quot;aba&amp;quot;, &amp;quot;aab&amp;quot;, &amp;quot;bbb&amp;quot;, &amp;quot;abb&amp;quot;, &amp;quot;bab&amp;quot;, &amp;quot;bba&amp;quot;}  Note: sequence of hashes doesn&amp;rsquo;t matter.</description>
    </item>
    
    <item>
      <title>Practice Go. Build Word</title>
      <link>/practice-go-buildword/</link>
      <pubDate>Tue, 28 Mar 2017 17:31:07 +0700</pubDate>
      
      <guid>/practice-go-buildword/</guid>
      <description>Seems like previous exercise is a quite difficult to implement :) Here is a new one.
Build Word You have a word in lowercase. Your task is to write this word using the fragments you are given. Each element of fragments can be used more than once, but they cannot overlap. It is guaranteed that it&amp;rsquo;s always possible to write the word using the given fragments.
What is the minimum number of elements you have to use?</description>
    </item>
    
    <item>
      <title>Practice Go. Sum Decimal</title>
      <link>/practice-go-sumdecimal/</link>
      <pubDate>Mon, 20 Mar 2017 12:32:20 +0700</pubDate>
      
      <guid>/practice-go-sumdecimal/</guid>
      <description>Create a Pull Request for this exercise
You are given a number n. Your task is to return the sum of the first 1000 decimal places of the square root of n.
Example The square root of 2 equals 1.4142135623..., so the answer is calculated as 4 + 1 + 4 + 2 + 1 + ..., 1000 digits altogether equals 4482.
SumDecimal(2) = 4482  Run tests with benchmarks go test -bench .</description>
    </item>
    
    <item>
      <title>Practice Go: Word Ladder</title>
      <link>/practice-go-wordladder/</link>
      <pubDate>Fri, 10 Mar 2017 15:41:47 +0700</pubDate>
      
      <guid>/practice-go-wordladder/</guid>
      <description>Create a Pull Request for this exercise
Word Ladder Given two words and a dictionary, find the length of the shortest transformation sequence from first word to second word such that:
 Only one letter can be changed at a time. Each transformed word must exist in the dictionary.  Please write a function WordLadder(from string, to string, dic []string) int that returns the length of the shortest transformation sequence, or 0 if no such transformation sequence exists.</description>
    </item>
    
    <item>
      <title>Practice Go: Merge Sort</title>
      <link>/practice-go-merge-sort/</link>
      <pubDate>Wed, 08 Mar 2017 12:37:17 +0700</pubDate>
      
      <guid>/practice-go-merge-sort/</guid>
      <description>Create a Pull Request for this exercise
The merge sort is a recursive sort of order n*log(n). The basic idea is to split the collection into smaller groups by halving it until the groups only have one element or no elements. Then merge the groups back together so that their elements are in order. This is how the algorithm gets its divide and conquer description.
Please write a function MergeSort(input []int) []int to sort integers from the lowest to the highest.</description>
    </item>
    
    <item>
      <title>Practice Go. Exercise 4: Jaro distance</title>
      <link>/practice-go-jaro/</link>
      <pubDate>Fri, 03 Mar 2017 12:25:20 +0700</pubDate>
      
      <guid>/practice-go-jaro/</guid>
      <description>Create a Pull Request for this exercise
The Jaro distance is a measure of similarity between two strings. The higher the Jaro distance for two strings is, the more similar the strings are. The score is normalized such that 0 equates to no similarity and 1 is an exact match.
The Jaro score of 2 given strings is:
Where: - m is the number of matching characters - t is half the number of transpositions</description>
    </item>
    
    <item>
      <title>How to separate Unit and Integration tests in Go</title>
      <link>/separate_unit_integration_tests/</link>
      <pubDate>Thu, 02 Mar 2017 11:25:19 +0700</pubDate>
      
      <guid>/separate_unit_integration_tests/</guid>
      <description>Usually integration tests take long time, because they&amp;rsquo;re doing real requests to real system. And it&amp;rsquo;s not necessary to run them every time we type go test. For example we have Golang client to work with PayPal SDK, it has some exported functions to send data to PayPal, then parse response and handle errors. So I wrote test functions to check that our client works properly with the real system, and be aware if PayPal changes response format or error codes.</description>
    </item>
    
    <item>
      <title>Practice Go. Exercise 3: Anagrams</title>
      <link>/practice-go-anagram/</link>
      <pubDate>Tue, 28 Feb 2017 23:50:07 +0700</pubDate>
      
      <guid>/practice-go-anagram/</guid>
      <description> Create a Pull Request for this exercise
When two or more words are composed of the same characters, but in a different order, they are called anagrams. Write a function FindAnagrams(dictionary []string, word string) that will find all possible anagrams for the given string in a given dictionary.
Sample anagram:
&amp;quot;Madam Curie&amp;quot; = &amp;quot;Radium came&amp;quot;  Run tests with benchmarks go test -bench .  </description>
    </item>
    
    <item>
      <title>How to mock exec.Command in Go</title>
      <link>/how_to_mock_exec_command/</link>
      <pubDate>Mon, 27 Feb 2017 10:15:26 +0700</pubDate>
      
      <guid>/how_to_mock_exec_command/</guid>
      <description>In some of my projects we have code that needs to run external executables, and it&amp;rsquo;s very difficult to test them, especially when your function is based on some kind of stdout parcing. So how to mock these commands in Go? Let&amp;rsquo;s check how this goal is achieved in os/exec package. In exec_test.go we can see a helperCommand. When running go tests, the go tool compiles an executable from your code, runs it and passes all the flags.</description>
    </item>
    
    <item>
      <title>playgo - CLI tool to send .go file to the Go Playground</title>
      <link>/playgo/</link>
      <pubDate>Wed, 22 Feb 2017 20:21:15 +0700</pubDate>
      
      <guid>/playgo/</guid>
      <description>Usually when we share a runnable Go code we do: copy code, open Go Playground, paste code, click Share.
So playgo does it for you.
Installation and Usage go get -u github.com/plutov/playgo/cmd/playgo playgo helloworld.go https://play.golang.org/p/v3rrZLwEUC  I&amp;rsquo;m waiting for pull requests or issues if it&amp;rsquo;s interesting for you or you&amp;rsquo;ve found some bug.
Project on GitHub</description>
    </item>
    
    <item>
      <title>Go 1.8 released. What is new?</title>
      <link>/go18_release_whats_new/</link>
      <pubDate>Fri, 17 Feb 2017 10:32:23 +0700</pubDate>
      
      <guid>/go18_release_whats_new/</guid>
      <description>Go team has released new version on February 16. You can get it from the download page. To celebrate the release, Go User Groups around the world are holding release parties this week. Spread the word using hashtag #GoReleaseParty.
And in this article I will talk in short what&amp;rsquo;s new in Go 1.8.
HTTP graceful shutdown It is now possible to call srv.Close() to halt an http.Server immediately, or srv.</description>
    </item>
    
  </channel>
</rss>