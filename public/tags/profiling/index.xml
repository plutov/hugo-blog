<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Profiling on Alex Pliutau</title>
    <link>/tags/profiling/</link>
    <description>Recent content in Profiling on Alex Pliutau</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Alex Pliutau</copyright>
    <lastBuildDate>Thu, 22 Sep 2016 17:23:43 +0700</lastBuildDate>
    
	<atom:link href="/tags/profiling/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Memory leaks with mux.Router in Go</title>
      <link>/memory_leaks_in_mux_router/</link>
      <pubDate>Thu, 22 Sep 2016 17:23:43 +0700</pubDate>
      
      <guid>/memory_leaks_in_mux_router/</guid>
      <description>Today we found that our web server written in Go has memory leaks and consume around 300M of memory, which is really a lot for our app. After restart it&amp;rsquo;s back to ~10M but each hour increased by few more. Golang has nice built-in tools to debug and find leaks.
import _ &amp;quot;net/http/pprof&amp;quot; // ... go func() { log.Println(http.ListenAndServe(&amp;quot;localhost:6060&amp;quot;, nil)) }()  go tool pprof http://localhost:6060/debug/pprof/heap (pprof) top ...  I have fixed one issue with not closed response.</description>
    </item>
    
  </channel>
</rss>